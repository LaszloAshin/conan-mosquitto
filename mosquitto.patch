diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3a68061..cb8526c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -17,17 +17,17 @@ if (WIN32)
 	execute_process(COMMAND cmd /c echo %DATE% %TIME% OUTPUT_VARIABLE TIMESTAMP
 			OUTPUT_STRIP_TRAILING_WHITESPACE)
 else (WIN32)
-	execute_process(COMMAND date "+%F %T%z" OUTPUT_VARIABLE TIMESTAMP
+	execute_process(COMMAND date "+%F" OUTPUT_VARIABLE TIMESTAMP
 			OUTPUT_STRIP_TRAILING_WHITESPACE)
 endif (WIN32)
 
 add_definitions (-DCMAKE -DVERSION=\"${VERSION}\" -DTIMESTAMP=\"${TIMESTAMP}\")
 
 if (WIN32)
-	set (BINDIR .)
+	set (BINDIR bin)
 	set (SBINDIR .)
 	set (SYSCONFDIR .)
-	set (LIBDIR .)
+	set (LIBDIR lib)
 	set (INCLUDEDIR include)
 	set (DATAROOTDIR share)
 	set (MANDIR man)
@@ -42,7 +42,7 @@ else (WIN32)
 	else ("${CMAKE_INSTALL_PREFIX}" STREQUAL /usr)
 		set (SYSCONFDIR etc/mosquitto)
 	endif ("${CMAKE_INSTALL_PREFIX}" STREQUAL /usr)
-	
+
 	set (LIBDIR lib${LIB_SUFFIX})
 	set (CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${LIBDIR}")
 	set (INCLUDEDIR include)
@@ -78,18 +78,18 @@ if (${WITH_SOCKS} STREQUAL ON)
 endif (${WITH_SOCKS} STREQUAL ON)
 
 option(WITH_SRV "Include SRV lookup support?" ON)
+option(WITH_BINARIES "Include Moquitto binaries" ON)
 
 # ========================================
 # Include projects
 # ========================================
 
 add_subdirectory(lib)
-add_subdirectory(client)
-add_subdirectory(src)
-add_subdirectory(man)
+if (WITH_BINARIES)
+	add_subdirectory(client)
+	add_subdirectory(src)
+endif (WITH_BINARIES)
 
 # ========================================
 # Install config file
 # ========================================
-
-install(FILES mosquitto.conf aclfile.example pskfile.example pwfile.example DESTINATION "${SYSCONFDIR}")
diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index 07be5d9..1e9f15b 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -1,4 +1,8 @@
-add_subdirectory(cpp)
+option(WITH_MOSQUITTOPP "Build C++ wrapper" ON)
+
+if (WITH_MOSQUITTOPP)
+	add_subdirectory(cpp)
+endif(WITH_MOSQUITTOPP)
 
 option(WITH_THREADING "Include client library threading support?" ON)
 if (${WITH_THREADING} STREQUAL ON)
@@ -25,7 +29,7 @@ include_directories(${mosquitto_SOURCE_DIR} ${mosquitto_SOURCE_DIR}/lib
 			${OPENSSL_INCLUDE_DIR} ${PTHREAD_INCLUDE_DIR})
 link_directories(${mosquitto_SOURCE_DIR}/lib)
 
-add_library(libmosquitto SHARED
+add_library(libmosquitto
 	logging_mosq.c logging_mosq.h
 	memory_mosq.c memory_mosq.h
 	messages_mosq.c messages_mosq.h
@@ -46,7 +50,7 @@ add_library(libmosquitto SHARED
 	util_mosq.c util_mosq.h
 	will_mosq.c will_mosq.h)
 
-set (LIBRARIES ${OPENSSL_LIBRARIES} ${PTHREAD_LIBRARIES})
+set (LIBRARIES ${CONAN_LIBS_OPENSSL} ${PTHREAD_LIBRARIES})
 
 if (UNIX AND NOT APPLE)
 	find_library(LIBRT rt)
@@ -78,7 +82,7 @@ set_target_properties(libmosquitto PROPERTIES
 	SOVERSION 1
 )
 
-install(TARGETS libmosquitto RUNTIME DESTINATION "${BINDIR}" LIBRARY DESTINATION "${LIBDIR}")
+install(TARGETS libmosquitto RUNTIME DESTINATION "${BINDIR}" ARCHIVE DESTINATION "${LIBDIR}" LIBRARY DESTINATION "${LIBDIR}")
 install(FILES mosquitto.h DESTINATION "${INCLUDEDIR}")
 
 if (UNIX)
diff --git a/lib/cpp/CMakeLists.txt b/lib/cpp/CMakeLists.txt
index b80dc18..c1564f2 100644
--- a/lib/cpp/CMakeLists.txt
+++ b/lib/cpp/CMakeLists.txt
@@ -2,7 +2,7 @@ include_directories(${mosquitto_SOURCE_DIR}/lib ${mosquitto_SOURCE_DIR}/lib/cpp
 			${STDBOOL_H_PATH} ${STDINT_H_PATH})
 link_directories(${mosquitto_BINARY_DIR}/lib)
 
-add_library(mosquittopp SHARED
+add_library(mosquittopp
 	mosquittopp.cpp mosquittopp.h)
 
 target_link_libraries(mosquittopp libmosquitto)
@@ -10,7 +10,7 @@ set_target_properties(mosquittopp PROPERTIES
 	VERSION ${VERSION}
 	SOVERSION 1
 )
-install(TARGETS mosquittopp RUNTIME DESTINATION "${BINDIR}" LIBRARY DESTINATION "${LIBDIR}")
+install(TARGETS mosquittopp RUNTIME DESTINATION "${BINDIR}" ARCHIVE DESTINATION "${LIBDIR}" LIBRARY DESTINATION "${LIBDIR}")
 install(FILES mosquittopp.h DESTINATION "${INCLUDEDIR}")
 
 if (UNIX)
diff --git a/lib/cpp/mosquittopp.h b/lib/cpp/mosquittopp.h
index 1ae0ef2..ebba41a 100644
--- a/lib/cpp/mosquittopp.h
+++ b/lib/cpp/mosquittopp.h
@@ -21,7 +21,7 @@ Contributors:
 #	ifdef mosquittopp_EXPORTS
 #		define mosqpp_EXPORT  __declspec(dllexport)
 #	else
-#		define mosqpp_EXPORT  __declspec(dllimport)
+#		define mosqpp_EXPORT
 #	endif
 #else
 #	define mosqpp_EXPORT
diff --git a/lib/mosquitto.h b/lib/mosquitto.h
index f304a06..5597d13 100644
--- a/lib/mosquitto.h
+++ b/lib/mosquitto.h
@@ -4,12 +4,12 @@ Copyright (c) 2010-2018 Roger Light <roger@atchoo.org>
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 and Eclipse Distribution License v1.0 which accompany this distribution.
- 
+
 The Eclipse Public License is available at
    http://www.eclipse.org/legal/epl-v10.html
 and the Eclipse Distribution License is available at
   http://www.eclipse.org/org/documents/edl-v10.php.
- 
+
 Contributors:
    Roger Light - initial implementation and documentation.
 */
@@ -25,7 +25,7 @@ extern "C" {
 #	ifdef libmosquitto_EXPORTS
 #		define libmosq_EXPORT  __declspec(dllexport)
 #	else
-#		define libmosq_EXPORT  __declspec(dllimport)
+#		define libmosq_EXPORT
 #	endif
 #else
 #	define libmosq_EXPORT
@@ -117,7 +117,7 @@ struct mosquitto;
  */
 /***************************************************
  * Important note
- * 
+ *
  * The following functions that deal with network operations will return
  * MOSQ_ERR_SUCCESS on success, but this does not mean that the operation has
  * taken place. An attempt will be made to write the network data, but if the
@@ -218,7 +218,7 @@ libmosq_EXPORT int mosquitto_lib_cleanup(void);
  */
 libmosq_EXPORT struct mosquitto *mosquitto_new(const char *id, bool clean_session, void *obj);
 
-/* 
+/*
  * Function: mosquitto_destroy
  *
  * Use to free memory associated with a mosquitto client instance.
@@ -260,7 +260,7 @@ libmosq_EXPORT void mosquitto_destroy(struct mosquitto *mosq);
  */
 libmosq_EXPORT int mosquitto_reinitialise(struct mosquitto *mosq, const char *id, bool clean_session, void *obj);
 
-/* 
+/*
  * Function: mosquitto_will_set
  *
  * Configure will information for a mosquitto instance. By default, clients do
@@ -285,7 +285,7 @@ libmosq_EXPORT int mosquitto_reinitialise(struct mosquitto *mosq, const char *id
  */
 libmosq_EXPORT int mosquitto_will_set(struct mosquitto *mosq, const char *topic, int payloadlen, const void *payload, int qos, bool retain);
 
-/* 
+/*
  * Function: mosquitto_will_clear
  *
  * Remove a previously configured will. This must be called before calling
@@ -356,7 +356,7 @@ libmosq_EXPORT int mosquitto_connect(struct mosquitto *mosq, const char *host, i
  *
  * Connect to an MQTT broker. This extends the functionality of
  * <mosquitto_connect> by adding the bind_address parameter. Use this function
- * if you need to restrict network communication over a particular interface. 
+ * if you need to restrict network communication over a particular interface.
  *
  * Parameters:
  * 	mosq -         a valid mosquitto instance.
@@ -422,7 +422,7 @@ libmosq_EXPORT int mosquitto_connect_async(struct mosquitto *mosq, const char *h
  *
  * This extends the functionality of <mosquitto_connect_async> by adding the
  * bind_address parameter. Use this function if you need to restrict network
- * communication over a particular interface. 
+ * communication over a particular interface.
  *
  * May be called before or after <mosquitto_loop_start>.
  *
@@ -459,7 +459,7 @@ libmosq_EXPORT int mosquitto_connect_bind_async(struct mosquitto *mosq, const ch
  *
  * This extends the functionality of <mosquitto_connect_async> by adding the
  * bind_address parameter. Use this function if you need to restrict network
- * communication over a particular interface. 
+ * communication over a particular interface.
  *
  * May be called before or after <mosquitto_loop_start>.
  *
@@ -494,7 +494,7 @@ libmosq_EXPORT int mosquitto_connect_srv(struct mosquitto *mosq, const char *hos
  * connection has been lost. It uses the values that were provided in the
  * <mosquitto_connect> call. It must not be called before
  * <mosquitto_connect>.
- * 
+ *
  * Parameters:
  * 	mosq - a valid mosquitto instance.
  *
@@ -525,7 +525,7 @@ libmosq_EXPORT int mosquitto_reconnect(struct mosquitto *mosq);
  * connection has been lost. It uses the values that were provided in the
  * <mosquitto_connect> or <mosquitto_connect_async> calls. It must not be
  * called before <mosquitto_connect>.
- * 
+ *
  * Parameters:
  * 	mosq - a valid mosquitto instance.
  *
@@ -562,11 +562,11 @@ libmosq_EXPORT int mosquitto_reconnect_async(struct mosquitto *mosq);
  */
 libmosq_EXPORT int mosquitto_disconnect(struct mosquitto *mosq);
 
-/* 
+/*
  * Function: mosquitto_publish
  *
  * Publish a message on a given topic.
- * 
+ *
  * Parameters:
  * 	mosq -       a valid mosquitto instance.
  * 	mid -        pointer to an int. If not NULL, the function will set this
@@ -594,7 +594,7 @@ libmosq_EXPORT int mosquitto_disconnect(struct mosquitto *mosq);
  *                          broker.
  * 	MOSQ_ERR_PAYLOAD_SIZE - if payloadlen is too large.
  *
- * See Also: 
+ * See Also:
  *	<mosquitto_max_inflight_messages_set>
  */
 libmosq_EXPORT int mosquitto_publish(struct mosquitto *mosq, int *mid, const char *topic, int payloadlen, const void *payload, int qos, bool retain);
@@ -664,7 +664,7 @@ libmosq_EXPORT int mosquitto_message_copy(struct mosquitto_message *dst, const s
 
 /*
  * Function: mosquitto_message_free
- * 
+ *
  * Completely free a mosquitto_message struct.
  *
  * Parameters:
@@ -695,7 +695,7 @@ libmosq_EXPORT void mosquitto_message_free(struct mosquitto_message **message);
  * <mosquitto_loop_misc>.
  *
  * Threads:
- *	
+ *
  * Parameters:
  *	mosq -        a valid mosquitto instance.
  *	timeout -     Maximum number of milliseconds to wait for network activity
@@ -703,7 +703,7 @@ libmosq_EXPORT void mosquitto_message_free(struct mosquitto_message **message);
  *	              return.  Set negative to use the default of 1000ms.
  *	max_packets - this parameter is currently unused and should be set to 1 for
  *	              future compatibility.
- * 
+ *
  * Returns:
  *	MOSQ_ERR_SUCCESS -   on success.
  * 	MOSQ_ERR_INVAL -     if the input parameters were invalid.
@@ -1086,7 +1086,7 @@ libmosq_EXPORT int mosquitto_tls_opts_set(struct mosquitto *mosq, int cert_reqs,
  */
 libmosq_EXPORT int mosquitto_tls_psk_set(struct mosquitto *mosq, const char *psk, const char *identity, const char *ciphers);
 
-/* 
+/*
  * Function: mosquitto_connect_callback_set
  *
  * Set the connect callback. This is called when the broker sends a CONNACK
@@ -1109,13 +1109,13 @@ libmosq_EXPORT int mosquitto_tls_psk_set(struct mosquitto *mosq, const char *psk
  * * 4-255 - reserved for future use
  */
 libmosq_EXPORT void mosquitto_connect_callback_set(struct mosquitto *mosq, void (*on_connect)(struct mosquitto *, void *, int));
- 
+
 /*
  * Function: mosquitto_disconnect_callback_set
  *
  * Set the disconnect callback. This is called when the broker has received the
  * DISCONNECT command and has disconnected the client.
- * 
+ *
  * Parameters:
  *  mosq -          a valid mosquitto instance.
  *  on_disconnect - a callback function in the following form:
@@ -1129,13 +1129,13 @@ libmosq_EXPORT void mosquitto_connect_callback_set(struct mosquitto *mosq, void
  *         indicates that the disconnect is unexpected.
  */
 libmosq_EXPORT void mosquitto_disconnect_callback_set(struct mosquitto *mosq, void (*on_disconnect)(struct mosquitto *, void *, int));
- 
+
 /*
  * Function: mosquitto_publish_callback_set
  *
  * Set the publish callback. This is called when a message initiated with
  * <mosquitto_publish> has been sent to the broker successfully.
- * 
+ *
  * Parameters:
  *  mosq -       a valid mosquitto instance.
  *  on_publish - a callback function in the following form:
@@ -1153,7 +1153,7 @@ libmosq_EXPORT void mosquitto_publish_callback_set(struct mosquitto *mosq, void
  *
  * Set the message callback. This is called when a message is received from the
  * broker.
- * 
+ *
  * Parameters:
  *  mosq -       a valid mosquitto instance.
  *  on_message - a callback function in the following form:
@@ -1176,7 +1176,7 @@ libmosq_EXPORT void mosquitto_message_callback_set(struct mosquitto *mosq, void
  *
  * Set the subscribe callback. This is called when the broker responds to a
  * subscription request.
- * 
+ *
  * Parameters:
  *  mosq -         a valid mosquitto instance.
  *  on_subscribe - a callback function in the following form:
@@ -1197,7 +1197,7 @@ libmosq_EXPORT void mosquitto_subscribe_callback_set(struct mosquitto *mosq, voi
  *
  * Set the unsubscribe callback. This is called when the broker responds to a
  * unsubscription request.
- * 
+ *
  * Parameters:
  *  mosq -           a valid mosquitto instance.
  *  on_unsubscribe - a callback function in the following form:
@@ -1300,7 +1300,7 @@ libmosq_EXPORT int mosquitto_max_inflight_messages_set(struct mosquitto *mosq, u
  *
  * Set the number of seconds to wait before retrying messages. This applies to
  * publish messages with QoS>0. May be called at any time.
- * 
+ *
  * Parameters:
  *  mosq -          a valid mosquitto instance.
  *  message_retry - the number of seconds to wait for a response before
@@ -1424,7 +1424,7 @@ libmosq_EXPORT const char *mosquitto_connack_string(int connack_code);
  * > char **topics;
  * > int topic_count;
  * > int i;
- * > 
+ * >
  * > mosquitto_sub_topic_tokenise("$SYS/broker/uptime", &topics, &topic_count);
  * >
  * > for(i=0; i<token_count; i++){
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 6918ac2..0991c40 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -36,6 +36,7 @@ if (${INC_BRIDGE_SUPPORT} STREQUAL ON)
 	add_definitions("-DWITH_BRIDGE")
 endif (${INC_BRIDGE_SUPPORT} STREQUAL ON)
 
+option(WITH_UUID "Include libuuid" OFF)
 
 option(USE_LIBWRAP
 	"Include tcp-wrappers support?" OFF)
@@ -80,7 +81,7 @@ add_definitions (-DWITH_BROKER)
 
 add_executable(mosquitto ${MOSQ_SRCS})
 
-set (MOSQ_LIBS ${MOSQ_LIBS} ${OPENSSL_LIBRARIES})
+set (MOSQ_LIBS ${MOSQ_LIBS} ${CONAN_LIBS_OPENSSL})
 
 # Check for getaddrinfo_a
 include(CheckLibraryExists)
@@ -114,11 +115,10 @@ endif (${WITH_WEBSOCKETS} STREQUAL ON)
 
 # Simple detect libuuid
 if(NOT APPLE)
-	FIND_PATH(UUID_HEADER uuid/uuid.h)
-	if (UUID_HEADER)
+	if (WITH_UUID)
 		add_definitions(-DWITH_UUID)
 		set (MOSQ_LIBS ${MOSQ_LIBS} uuid)
-	endif (UUID_HEADER)
+	endif (WITH_UUID)
 endif(NOT APPLE)
 
 target_link_libraries(mosquitto ${MOSQ_LIBS})
@@ -131,16 +131,15 @@ if (UNIX)
 	endif (APPLE)
 endif (UNIX)
 
-install(TARGETS mosquitto RUNTIME DESTINATION "${SBINDIR}" LIBRARY DESTINATION "${LIBDIR}")
+install(TARGETS mosquitto RUNTIME DESTINATION "${BINDIR}" LIBRARY DESTINATION "${LIBDIR}")
 install(FILES mosquitto_plugin.h DESTINATION "${INCLUDEDIR}")
 
 if (${WITH_TLS} STREQUAL ON)
 	add_executable(mosquitto_passwd mosquitto_passwd.c)
-	target_link_libraries(mosquitto_passwd "${OPENSSL_LIBRARIES}")
+	target_link_libraries(mosquitto_passwd "${CONAN_LIBS_OPENSSL}")
 	install(TARGETS mosquitto_passwd RUNTIME DESTINATION "${BINDIR}" LIBRARY DESTINATION "${LIBDIR}")
 endif (${WITH_TLS} STREQUAL ON)
 
 if (UNIX)
 	install(CODE "EXEC_PROGRAM(/sbin/ldconfig)")
 endif (UNIX)
-
